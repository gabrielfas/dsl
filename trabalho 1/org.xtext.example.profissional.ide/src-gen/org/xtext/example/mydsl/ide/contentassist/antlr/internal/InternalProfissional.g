/*
 * generated by Xtext 2.25.0
 */
grammar InternalProfissional;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.ProfissionalGrammarAccess;

}
@parser::members {
	private ProfissionalGrammarAccess grammarAccess;

	public void setGrammarAccess(ProfissionalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getProfissionalAssignment()); }
		(rule__Model__ProfissionalAssignment)*
		{ after(grammarAccess.getModelAccess().getProfissionalAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePessoa
entryRulePessoa
:
{ before(grammarAccess.getPessoaRule()); }
	 rulePessoa
{ after(grammarAccess.getPessoaRule()); } 
	 EOF 
;

// Rule Pessoa
rulePessoa 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPessoaAccess().getGroup()); }
		(rule__Pessoa__Group__0)
		{ after(grammarAccess.getPessoaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmpresa
entryRuleEmpresa
:
{ before(grammarAccess.getEmpresaRule()); }
	 ruleEmpresa
{ after(grammarAccess.getEmpresaRule()); } 
	 EOF 
;

// Rule Empresa
ruleEmpresa 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmpresaAccess().getGroup()); }
		(rule__Empresa__Group__0)
		{ after(grammarAccess.getEmpresaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLinguagens
entryRuleLinguagens
:
{ before(grammarAccess.getLinguagensRule()); }
	 ruleLinguagens
{ after(grammarAccess.getLinguagensRule()); } 
	 EOF 
;

// Rule Linguagens
ruleLinguagens 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinguagensAccess().getGroup()); }
		(rule__Linguagens__Group__0)
		{ after(grammarAccess.getLinguagensAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pessoa__Group__0__Impl
	rule__Pessoa__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPessoaAccess().getNomeKeyword_0()); }
	'Nome:'
	{ after(grammarAccess.getPessoaAccess().getNomeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pessoa__Group__1__Impl
	rule__Pessoa__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPessoaAccess().getNameAssignment_1()); }
	(rule__Pessoa__NameAssignment_1)
	{ after(grammarAccess.getPessoaAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pessoa__Group__2__Impl
	rule__Pessoa__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPessoaAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getPessoaAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pessoa__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPessoaAccess().getEmpresaAssignment_3()); }
	(rule__Pessoa__EmpresaAssignment_3)
	{ after(grammarAccess.getPessoaAccess().getEmpresaAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Empresa__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Empresa__Group__0__Impl
	rule__Empresa__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmpresaAccess().getEmpresaKeyword_0()); }
	'Empresa:'
	{ after(grammarAccess.getEmpresaAccess().getEmpresaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Empresa__Group__1__Impl
	rule__Empresa__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmpresaAccess().getNameAssignment_1()); }
	(rule__Empresa__NameAssignment_1)
	{ after(grammarAccess.getEmpresaAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Empresa__Group__2__Impl
	rule__Empresa__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmpresaAccess().getLinguagensKeyword_2()); }
	',Linguagens:{'
	{ after(grammarAccess.getEmpresaAccess().getLinguagensKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Empresa__Group__3__Impl
	rule__Empresa__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmpresaAccess().getLinguagensAssignment_3()); }
	(rule__Empresa__LinguagensAssignment_3)*
	{ after(grammarAccess.getEmpresaAccess().getLinguagensAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Empresa__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmpresaAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getEmpresaAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Linguagens__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Linguagens__Group__0__Impl
	rule__Linguagens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Linguagens__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinguagensAccess().getNameAssignment_0()); }
	(rule__Linguagens__NameAssignment_0)
	{ after(grammarAccess.getLinguagensAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Linguagens__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Linguagens__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Linguagens__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinguagensAccess().getCommaKeyword_1()); }
	(',')?
	{ after(grammarAccess.getLinguagensAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProfissionalAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProfissionalPessoaParserRuleCall_0()); }
		rulePessoa
		{ after(grammarAccess.getModelAccess().getProfissionalPessoaParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPessoaAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPessoaAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pessoa__EmpresaAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPessoaAccess().getEmpresaEmpresaParserRuleCall_3_0()); }
		ruleEmpresa
		{ after(grammarAccess.getPessoaAccess().getEmpresaEmpresaParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEmpresaAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEmpresaAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Empresa__LinguagensAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEmpresaAccess().getLinguagensLinguagensParserRuleCall_3_0()); }
		ruleLinguagens
		{ after(grammarAccess.getEmpresaAccess().getLinguagensLinguagensParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Linguagens__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinguagensAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getLinguagensAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
