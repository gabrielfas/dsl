/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.profissional.Empresa;
import org.xtext.example.mydsl.profissional.Linguagens;
import org.xtext.example.mydsl.profissional.Model;
import org.xtext.example.mydsl.profissional.Pessoa;
import org.xtext.example.mydsl.profissional.ProfissionalPackage;
import org.xtext.example.mydsl.services.ProfissionalGrammarAccess;

@SuppressWarnings("all")
public class ProfissionalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProfissionalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProfissionalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProfissionalPackage.EMPRESA:
				sequence_Empresa(context, (Empresa) semanticObject); 
				return; 
			case ProfissionalPackage.LINGUAGENS:
				sequence_Linguagens(context, (Linguagens) semanticObject); 
				return; 
			case ProfissionalPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ProfissionalPackage.PESSOA:
				sequence_Pessoa(context, (Pessoa) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Empresa returns Empresa
	 *
	 * Constraint:
	 *     (name=ID linguagens+=Linguagens*)
	 */
	protected void sequence_Empresa(ISerializationContext context, Empresa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Linguagens returns Linguagens
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Linguagens(ISerializationContext context, Linguagens semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProfissionalPackage.Literals.LINGUAGENS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProfissionalPackage.Literals.LINGUAGENS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinguagensAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     profissional+=Pessoa+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pessoa returns Pessoa
	 *
	 * Constraint:
	 *     (name=ID empresa+=Empresa)
	 */
	protected void sequence_Pessoa(ISerializationContext context, Pessoa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
