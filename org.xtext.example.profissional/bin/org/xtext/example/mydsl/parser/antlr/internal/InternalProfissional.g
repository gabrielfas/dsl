/*
 * generated by Xtext 2.25.0
 */
grammar InternalProfissional;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.ProfissionalGrammarAccess;

}

@parser::members {

 	private ProfissionalGrammarAccess grammarAccess;

    public InternalProfissionalParser(TokenStream input, ProfissionalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ProfissionalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProfissionalPessoaParserRuleCall_0());
			}
			lv_profissional_0_0=rulePessoa
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"profissional",
					lv_profissional_0_0,
					"org.xtext.example.mydsl.Profissional.Pessoa");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulePessoa
entryRulePessoa returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPessoaRule()); }
	iv_rulePessoa=rulePessoa
	{ $current=$iv_rulePessoa.current; }
	EOF;

// Rule Pessoa
rulePessoa returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Nome:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPessoaAccess().getNomeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPessoaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPessoaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getPessoaAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPessoaAccess().getEmpresaEmpresaParserRuleCall_3_0());
				}
				lv_empresa_3_0=ruleEmpresa
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPessoaRule());
					}
					add(
						$current,
						"empresa",
						lv_empresa_3_0,
						"org.xtext.example.mydsl.Profissional.Empresa");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEmpresa
entryRuleEmpresa returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmpresaRule()); }
	iv_ruleEmpresa=ruleEmpresa
	{ $current=$iv_ruleEmpresa.current; }
	EOF;

// Rule Empresa
ruleEmpresa returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Empresa:'
		{
			newLeafNode(otherlv_0, grammarAccess.getEmpresaAccess().getEmpresaKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEmpresaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEmpresaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=',Linguagens:{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEmpresaAccess().getLinguagensKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEmpresaAccess().getLinguagensLinguagensParserRuleCall_3_0());
				}
				lv_linguagens_3_0=ruleLinguagens
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEmpresaRule());
					}
					add(
						$current,
						"linguagens",
						lv_linguagens_3_0,
						"org.xtext.example.mydsl.Profissional.Linguagens");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEmpresaAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLinguagens
entryRuleLinguagens returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinguagensRule()); }
	iv_ruleLinguagens=ruleLinguagens
	{ $current=$iv_ruleLinguagens.current; }
	EOF;

// Rule Linguagens
ruleLinguagens returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getLinguagensAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLinguagensRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
