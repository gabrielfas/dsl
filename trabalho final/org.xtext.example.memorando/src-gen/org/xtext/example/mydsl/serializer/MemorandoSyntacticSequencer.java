/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MemorandoGrammarAccess;

@SuppressWarnings("all")
public class MemorandoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MemorandoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CargoDestinatario_SpaceKeyword_1_q;
	protected AbstractElementAlias match_Destino_SpaceKeyword_1_q;
	protected AbstractElementAlias match_Paragrafo_SpaceKeyword_1_q;
	protected AbstractElementAlias match_SetorDestinatario_SpaceKeyword_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MemorandoGrammarAccess) access;
		match_CargoDestinatario_SpaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getCargoDestinatarioAccess().getSpaceKeyword_1());
		match_Destino_SpaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getDestinoAccess().getSpaceKeyword_1());
		match_Paragrafo_SpaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getParagrafoAccess().getSpaceKeyword_1());
		match_SetorDestinatario_SpaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getSetorDestinatarioAccess().getSpaceKeyword_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CargoDestinatario_SpaceKeyword_1_q.equals(syntax))
				emit_CargoDestinatario_SpaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Destino_SpaceKeyword_1_q.equals(syntax))
				emit_Destino_SpaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Paragrafo_SpaceKeyword_1_q.equals(syntax))
				emit_Paragrafo_SpaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SetorDestinatario_SpaceKeyword_1_q.equals(syntax))
				emit_SetorDestinatario_SpaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     cargoDestinatario=STRING (ambiguity) (rule end)
	 */
	protected void emit_CargoDestinatario_SpaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     destino=ID (ambiguity) (rule end)
	 */
	protected void emit_Destino_SpaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     paragrafo=STRING (ambiguity) (rule end)
	 */
	protected void emit_Paragrafo_SpaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     setorDestinatario=ID (ambiguity) (rule end)
	 */
	protected void emit_SetorDestinatario_SpaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
