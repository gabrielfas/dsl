/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.memorando.Destino;
import org.xtext.example.mydsl.memorando.Memorando;
import org.xtext.example.mydsl.memorando.MemorandoPackage;
import org.xtext.example.mydsl.memorando.Model;
import org.xtext.example.mydsl.memorando.Paragrafo;
import org.xtext.example.mydsl.services.MemorandoGrammarAccess;

@SuppressWarnings("all")
public class MemorandoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MemorandoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MemorandoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MemorandoPackage.DESTINO:
				sequence_Destino(context, (Destino) semanticObject); 
				return; 
			case MemorandoPackage.MEMORANDO:
				sequence_Memorando(context, (Memorando) semanticObject); 
				return; 
			case MemorandoPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MemorandoPackage.PARAGRAFO:
				sequence_Paragrafo(context, (Paragrafo) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Destino returns Destino
	 *
	 * Constraint:
	 *     destino=ID
	 */
	protected void sequence_Destino(ISerializationContext context, Destino semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MemorandoPackage.Literals.DESTINO__DESTINO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MemorandoPackage.Literals.DESTINO__DESTINO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDestinoAccess().getDestinoIDTerminalRuleCall_0(), semanticObject.getDestino());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Memorando returns Memorando
	 *
	 * Constraint:
	 *     (
	 *         numero=INT+ 
	 *         setorDestinatario=ID+ 
	 *         setorRemetente=ID+ 
	 *         cidade=ID+ 
	 *         estado=ID+ 
	 *         dia=INT+ 
	 *         mes=ID+ 
	 *         ano=INT+ 
	 *         cargoDestinatario=STRING+ 
	 *         assunto=STRING+ 
	 *         destinos+=Destino* 
	 *         paragrafos+=Paragrafo* 
	 *         remetente=STRING+ 
	 *         cargoRemetente=STRING
	 *     )
	 */
	protected void sequence_Memorando(ISerializationContext context, Memorando semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     memorandos+=Memorando+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Paragrafo returns Paragrafo
	 *
	 * Constraint:
	 *     paragrafo=STRING
	 */
	protected void sequence_Paragrafo(ISerializationContext context, Paragrafo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MemorandoPackage.Literals.PARAGRAFO__PARAGRAFO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MemorandoPackage.Literals.PARAGRAFO__PARAGRAFO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParagrafoAccess().getParagrafoSTRINGTerminalRuleCall_0(), semanticObject.getParagrafo());
		feeder.finish();
	}
	
	
}
